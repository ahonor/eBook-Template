{
  "name": "Ebook-template",
  "tagline": "Template to create PDF, ePub and Kindle books with Asciidoc and dblatex",
  "body": "Template for Writing an eBook\r\n=============================\r\n\r\nThis is a new version of the classic template for eBooks.\r\n\r\nDesign Guidelines\r\n-----------------\r\n\r\nWhy using such a complex setup instead of just using a simpler tool like\r\nWord or Pages?\r\n\r\n-   The primary motivation of this template is versioning. Being able to\r\n    use plain text files as input for the book brings the possibility of\r\n    versioning each change individually using Git, Subversion or any\r\n    other similar tool. This also opens up the door to collaboration\r\n    among team members when editing a document.\r\n-   The second motivation is to separate the presentation and the layout\r\n    of the final book from its contents. Other output file types could\r\n    be added in the future.\r\n-   This also brings the possibility of using any text editor in just\r\n    about any operating system; files are just plain text files that can\r\n    be edited with gEdit, Notepad, Emacs, Vim, TextEdit, or any other\r\n    similar tool.\r\n-   Markup languages like Markdown or Asciidoc (used in this template)\r\n    are simpler and more readable than LaTeX or other SGML-like\r\n    languages, making the files readable and lean even when edited in a\r\n    text editor without any syntax highlighting or formatting support.\r\n-   Finally, being able to streamline the creation of the three versions\r\n    of the book in just one command-line operation allows the whole\r\n    setup to be automatized.\r\n\r\nThe choice of [Asciidoctor](http://asciidoctor.org) comes from the\r\nfollowing features:\r\n\r\n-   Syntax highlighting of [Swift](https://swift.org) code in all\r\n    outputs ([Pandoc](http://pandoc.org) does not support Swift at\r\n    the moment.)\r\n-   Multi-file projects (Pandoc, because of Markdown, does not support\r\n    the `include` mechanism that AsciiDoc provides.)\r\n\r\nHistory\r\n-------\r\n\r\nThis toolkit started as a pure LaTeX workflow in 2009. In late 2011 the\r\nsystem moved to Markdown and it used Pandoc to generate the artifacts.\r\nIn 2012 the choice was [AsciiDoc](http://asciidoc.org), and in 2016 this\r\nnew system was finally developed, using AsciiDoctor.\r\n\r\nHow To Use\r\n----------\r\n\r\nThe `master.asciidoc` file at the root of this project provides the\r\nguiding structure of the book. Chapters can be shuffled around,\r\nindependently of their contents or internal structure.\r\n\r\nIndividual chapters are stored in the `chapters` folder, one file per\r\nchapter.\r\n\r\nImages are stored as PNG files in the `images` folder. Data files (XML,\r\nCSV, etc,) are located in the `data` folder.\r\n\r\nThe Makefile creates a temporary `_build` folder, copies all the\r\ndifferent elements in it (the master file, the chapters and the images)\r\nand commands the execution of the whole toolchain in order to get the\r\nfinal result:\r\n\r\n-   Self-contained HTML5\r\n-   PDF\r\n-   EPUB3\r\n-   Kindle (.mobi)\r\n\r\nUML diagrams are generated by text through\r\n[PlantUML](http://plantuml.com).\r\n\r\n1.  Execute the `make` command. This will create the PDF, ePub and HTML\r\n    versions of the book.\r\n2.  `make pdf`, `make html`, `make epub` and `make kindle` each generate\r\n    the specified version of the booklet.\r\n3.  `make clean` removes the `_build` folder.\r\n\r\nAfter the build process completes, the compiled eBooks will be available\r\nat the `_build` subfolder.\r\n\r\nRequirements\r\n------------\r\n\r\nBefore using this template, make sure to have Homebrew and Rubygems\r\ninstalled, then run the following commands to install the required\r\ndependencies:\r\n\r\n    $ brew install plantuml\r\n    $ gem install pygments.rb\r\n    $ gem install kindlegen\r\n    $ gem install asciidoctor\r\n    $ gem install asciidoctor-pdf --pre\r\n    $ gem install asciidoctor-epub3 --pre\r\n    $ gem install asciidoctor-diagram\r\n\r\nLicense\r\n-------\r\n\r\nSee the LICENSE.md file.\r\n",
  "google": "",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}